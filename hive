#!/bin/bash
# can be run in host or container

hive_container="tdeheurles/hive:0.1"

# USAGE
# =========
usage() {
    echo "${0} [-v] [-c] [-w] ..."
    echo "--no-tty: remove tty for the hive instance"
    echo "-v:       verbose"
    echo "-c:       stop running containers, remove all containers and image without tag"
    echo "-w:       clean hive_working_directory volume. That is needed to clean project for hive started from inside a container."
}

while [ "$#" -gt 0 ]; do
  case "$1" in
    --no-tty) NOTTY=YES;                                 shift 1;;
    -v)       VERBOSE=YES;                               shift 1;;
    -c)       CLEAN=YES;                                 shift 1;;
    -w)       REMOVE_WORKING_DIRECTORY=YES;              shift 1;;
    -wv|vw)   REMOVE_WORKING_DIRECTORY=YES; VERBOSE=YES; shift 1;;
    -*) echo "unknown option: $1" >&2; usage; exit 1;;
    *) ARGS="$@"; break;;
  esac
done

verbose() {
    if [[ ${VERBOSE} == YES ]]
    then echo -e "\e[36mhive-bash: $1\e[39m"; fi
}

verbose "Start:"

# CLEAN
# =====
clean_containers() {
    verbose "Stopping running container(s)"
    running_containers=$(docker ps -q)
    if [[ ${running_containers} != "" ]];then
        docker kill ${running_containers}
    fi
    verbose "Deleting all container(s)"
    stopped_containers=$(docker ps -qa)
    if [[ ${stopped_containers} != "" ]];then
        docker rm ${stopped_containers}
    fi
    verbose "Deleting image without tag"
    untagged_container=$(docker images -q -f dangling=true)
    if [[ ${untagged_container} != "" ]];then
        docker rmi ${untagged_container}
    fi
}
if [[ ${CLEAN} == YES ]];then
    clean_containers
    exit 0
fi

# SCRIPT
# ======
if [[ ${REMOVE_WORKING_DIRECTORY} == YES ]];then
    verbose "Removing hive_working_directory volume"
    if [[ -f /.dockerenv ]];then
        echo "can't remove hive_working_directory from container"
        exit 1
    fi
    clean_containers
    docker volume rm "hive_working_directory"
fi

if [[ -f /.dockerenv ]];then
    verbose "Parent is a container"
    # running from a container
    ubuntuContainer="ubuntu:14.04.2"
    hive_working_directory="hive_working_directory"
    container="hive_working_directory_to_volume"

    # LOOK IF DATA ARE COPIED
    docker run                                                  \
        -v ${hive_working_directory}:/${hive_working_directory} \
        ${ubuntuContainer}                                      \
        bash -c "if [[ ! -d /hive_working_directory/.hive ]];then exit 1;fi"

    if [[ $? != 0 ]];then
        verbose "folder .hive does not exist"
        echo "Copying current directory to a volume (avoid to run hive on big directory ; copy is only done once)"
        docker run -d                                               \
            -v ${hive_working_directory}:/${hive_working_directory} \
            ${ubuntuContainer}                                      \
            bash -c "while true; do echo ping; sleep 60; done"      \
            > container_id
        mkdir -p .hive
        docker cp . $(cat container_id):/${hive_working_directory}
        rm -r .hive

        # REMOVE TEMP_CONTAINER
        docker stop $(cat container_id) > /dev/null
        docker rm $(cat container_id) > /dev/null
        rm container_id
    else
        verbose "folder .hive exist, don't copy code to a volume"
    fi

    container_or_host="-v ${hive_working_directory}:/${hive_working_directory}"
    container_or_host+=" -e HIVE_HOME=/${hive_working_directory}"
else
    # running from a VM or host
    verbose "Parent is host"
    container_or_host="-v /$(pwd):/$(pwd)"
    container_or_host+=" -e HIVE_HOME=/$(pwd)"
fi

if [[ ${NOTTY} == YES ]];then
    TTY="";
else
    TTY="-t"
fi

docker run -i ${TTY}                              \
    --net=host                                    \
    -v hive_docker:/root/.docker                  \
    -v hive_log:/hive_log                         \
    -v hive_share:/hive_share                     \
    -v //var/run/docker.sock:/var/run/docker.sock \
    ${container_or_host}                          \
    ${hive_container} ${ARGS}
